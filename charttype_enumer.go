// Code generated by "enumer -type ChartType -json -trimprefix ChartType"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ChartTypeName = "UnspecifiedTickDailyBarMinuteBarCustomDOM"

var _ChartTypeIndex = [...]uint8{0, 11, 15, 23, 32, 38, 41}

const _ChartTypeLowerName = "unspecifiedtickdailybarminutebarcustomdom"

func (i ChartType) String() string {
	if i >= ChartType(len(_ChartTypeIndex)-1) {
		return fmt.Sprintf("ChartType(%d)", i)
	}
	return _ChartTypeName[_ChartTypeIndex[i]:_ChartTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChartTypeNoOp() {
	var x [1]struct{}
	_ = x[ChartTypeUnspecified-(0)]
	_ = x[ChartTypeTick-(1)]
	_ = x[ChartTypeDailyBar-(2)]
	_ = x[ChartTypeMinuteBar-(3)]
	_ = x[ChartTypeCustom-(4)]
	_ = x[ChartTypeDOM-(5)]
}

var _ChartTypeValues = []ChartType{ChartTypeUnspecified, ChartTypeTick, ChartTypeDailyBar, ChartTypeMinuteBar, ChartTypeCustom, ChartTypeDOM}

var _ChartTypeNameToValueMap = map[string]ChartType{
	_ChartTypeName[0:11]:       ChartTypeUnspecified,
	_ChartTypeLowerName[0:11]:  ChartTypeUnspecified,
	_ChartTypeName[11:15]:      ChartTypeTick,
	_ChartTypeLowerName[11:15]: ChartTypeTick,
	_ChartTypeName[15:23]:      ChartTypeDailyBar,
	_ChartTypeLowerName[15:23]: ChartTypeDailyBar,
	_ChartTypeName[23:32]:      ChartTypeMinuteBar,
	_ChartTypeLowerName[23:32]: ChartTypeMinuteBar,
	_ChartTypeName[32:38]:      ChartTypeCustom,
	_ChartTypeLowerName[32:38]: ChartTypeCustom,
	_ChartTypeName[38:41]:      ChartTypeDOM,
	_ChartTypeLowerName[38:41]: ChartTypeDOM,
}

var _ChartTypeNames = []string{
	_ChartTypeName[0:11],
	_ChartTypeName[11:15],
	_ChartTypeName[15:23],
	_ChartTypeName[23:32],
	_ChartTypeName[32:38],
	_ChartTypeName[38:41],
}

// ChartTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChartTypeString(s string) (ChartType, error) {
	if val, ok := _ChartTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChartTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChartType values", s)
}

// ChartTypeValues returns all values of the enum
func ChartTypeValues() []ChartType {
	return _ChartTypeValues
}

// ChartTypeStrings returns a slice of all String values of the enum
func ChartTypeStrings() []string {
	strs := make([]string, len(_ChartTypeNames))
	copy(strs, _ChartTypeNames)
	return strs
}

// IsAChartType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChartType) IsAChartType() bool {
	for _, v := range _ChartTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChartType
func (i ChartType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChartType
func (i *ChartType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChartType should be a string, got %s", data)
	}

	var err error
	*i, err = ChartTypeString(s)
	return err
}
