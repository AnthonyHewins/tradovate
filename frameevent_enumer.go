// Code generated by "enumer -type frameEvent -json -trimprefix frameEvent -transform lower"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _frameEventName = "unspecifiedpropsshutdownmdchartclock"

var _frameEventIndex = [...]uint8{0, 11, 16, 24, 26, 31, 36}

const _frameEventLowerName = "unspecifiedpropsshutdownmdchartclock"

func (i frameEvent) String() string {
	if i >= frameEvent(len(_frameEventIndex)-1) {
		return fmt.Sprintf("frameEvent(%d)", i)
	}
	return _frameEventName[_frameEventIndex[i]:_frameEventIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _frameEventNoOp() {
	var x [1]struct{}
	_ = x[frameEventUnspecified-(0)]
	_ = x[frameEventProps-(1)]
	_ = x[frameEventShutdown-(2)]
	_ = x[frameEventMd-(3)]
	_ = x[frameEventChart-(4)]
	_ = x[frameEventClock-(5)]
}

var _frameEventValues = []frameEvent{frameEventUnspecified, frameEventProps, frameEventShutdown, frameEventMd, frameEventChart, frameEventClock}

var _frameEventNameToValueMap = map[string]frameEvent{
	_frameEventName[0:11]:       frameEventUnspecified,
	_frameEventLowerName[0:11]:  frameEventUnspecified,
	_frameEventName[11:16]:      frameEventProps,
	_frameEventLowerName[11:16]: frameEventProps,
	_frameEventName[16:24]:      frameEventShutdown,
	_frameEventLowerName[16:24]: frameEventShutdown,
	_frameEventName[24:26]:      frameEventMd,
	_frameEventLowerName[24:26]: frameEventMd,
	_frameEventName[26:31]:      frameEventChart,
	_frameEventLowerName[26:31]: frameEventChart,
	_frameEventName[31:36]:      frameEventClock,
	_frameEventLowerName[31:36]: frameEventClock,
}

var _frameEventNames = []string{
	_frameEventName[0:11],
	_frameEventName[11:16],
	_frameEventName[16:24],
	_frameEventName[24:26],
	_frameEventName[26:31],
	_frameEventName[31:36],
}

// frameEventString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func frameEventString(s string) (frameEvent, error) {
	if val, ok := _frameEventNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _frameEventNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to frameEvent values", s)
}

// frameEventValues returns all values of the enum
func frameEventValues() []frameEvent {
	return _frameEventValues
}

// frameEventStrings returns a slice of all String values of the enum
func frameEventStrings() []string {
	strs := make([]string, len(_frameEventNames))
	copy(strs, _frameEventNames)
	return strs
}

// IsAframeEvent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i frameEvent) IsAframeEvent() bool {
	for _, v := range _frameEventValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for frameEvent
func (i frameEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for frameEvent
func (i *frameEvent) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("frameEvent should be a string, got %s", data)
	}

	var err error
	*i, err = frameEventString(s)
	return err
}
