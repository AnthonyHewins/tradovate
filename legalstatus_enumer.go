// Code generated by "enumer -type LegalStatus -trimprefix LegalStatus -json"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _LegalStatusName = "UnspecifiedCorporationGPIRAIndividualJointLLCLLPLPPTRTrust"

var _LegalStatusIndex = [...]uint8{0, 11, 22, 24, 27, 37, 42, 45, 48, 50, 53, 58}

const _LegalStatusLowerName = "unspecifiedcorporationgpiraindividualjointllcllplpptrtrust"

func (i LegalStatus) String() string {
	if i >= LegalStatus(len(_LegalStatusIndex)-1) {
		return fmt.Sprintf("LegalStatus(%d)", i)
	}
	return _LegalStatusName[_LegalStatusIndex[i]:_LegalStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LegalStatusNoOp() {
	var x [1]struct{}
	_ = x[LegalStatusUnspecified-(0)]
	_ = x[LegalStatusCorporation-(1)]
	_ = x[LegalStatusGP-(2)]
	_ = x[LegalStatusIRA-(3)]
	_ = x[LegalStatusIndividual-(4)]
	_ = x[LegalStatusJoint-(5)]
	_ = x[LegalStatusLLC-(6)]
	_ = x[LegalStatusLLP-(7)]
	_ = x[LegalStatusLP-(8)]
	_ = x[LegalStatusPTR-(9)]
	_ = x[LegalStatusTrust-(10)]
}

var _LegalStatusValues = []LegalStatus{LegalStatusUnspecified, LegalStatusCorporation, LegalStatusGP, LegalStatusIRA, LegalStatusIndividual, LegalStatusJoint, LegalStatusLLC, LegalStatusLLP, LegalStatusLP, LegalStatusPTR, LegalStatusTrust}

var _LegalStatusNameToValueMap = map[string]LegalStatus{
	_LegalStatusName[0:11]:       LegalStatusUnspecified,
	_LegalStatusLowerName[0:11]:  LegalStatusUnspecified,
	_LegalStatusName[11:22]:      LegalStatusCorporation,
	_LegalStatusLowerName[11:22]: LegalStatusCorporation,
	_LegalStatusName[22:24]:      LegalStatusGP,
	_LegalStatusLowerName[22:24]: LegalStatusGP,
	_LegalStatusName[24:27]:      LegalStatusIRA,
	_LegalStatusLowerName[24:27]: LegalStatusIRA,
	_LegalStatusName[27:37]:      LegalStatusIndividual,
	_LegalStatusLowerName[27:37]: LegalStatusIndividual,
	_LegalStatusName[37:42]:      LegalStatusJoint,
	_LegalStatusLowerName[37:42]: LegalStatusJoint,
	_LegalStatusName[42:45]:      LegalStatusLLC,
	_LegalStatusLowerName[42:45]: LegalStatusLLC,
	_LegalStatusName[45:48]:      LegalStatusLLP,
	_LegalStatusLowerName[45:48]: LegalStatusLLP,
	_LegalStatusName[48:50]:      LegalStatusLP,
	_LegalStatusLowerName[48:50]: LegalStatusLP,
	_LegalStatusName[50:53]:      LegalStatusPTR,
	_LegalStatusLowerName[50:53]: LegalStatusPTR,
	_LegalStatusName[53:58]:      LegalStatusTrust,
	_LegalStatusLowerName[53:58]: LegalStatusTrust,
}

var _LegalStatusNames = []string{
	_LegalStatusName[0:11],
	_LegalStatusName[11:22],
	_LegalStatusName[22:24],
	_LegalStatusName[24:27],
	_LegalStatusName[27:37],
	_LegalStatusName[37:42],
	_LegalStatusName[42:45],
	_LegalStatusName[45:48],
	_LegalStatusName[48:50],
	_LegalStatusName[50:53],
	_LegalStatusName[53:58],
}

// LegalStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LegalStatusString(s string) (LegalStatus, error) {
	if val, ok := _LegalStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LegalStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LegalStatus values", s)
}

// LegalStatusValues returns all values of the enum
func LegalStatusValues() []LegalStatus {
	return _LegalStatusValues
}

// LegalStatusStrings returns a slice of all String values of the enum
func LegalStatusStrings() []string {
	strs := make([]string, len(_LegalStatusNames))
	copy(strs, _LegalStatusNames)
	return strs
}

// IsALegalStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LegalStatus) IsALegalStatus() bool {
	for _, v := range _LegalStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LegalStatus
func (i LegalStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LegalStatus
func (i *LegalStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LegalStatus should be a string, got %s", data)
	}

	var err error
	*i, err = LegalStatusString(s)
	return err
}
