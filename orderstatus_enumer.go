// Code generated by "enumer -type OrderStatus -trimprefix OrderStatus -json"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OrderStatusName = "UnknownCanceledCompletedExpiredFilledPendingCancelPendingNewPendingReplaceRejectedSuspendedWorking"

var _OrderStatusIndex = [...]uint8{0, 7, 15, 24, 31, 37, 50, 60, 74, 82, 91, 98}

const _OrderStatusLowerName = "unknowncanceledcompletedexpiredfilledpendingcancelpendingnewpendingreplacerejectedsuspendedworking"

func (i OrderStatus) String() string {
	if i >= OrderStatus(len(_OrderStatusIndex)-1) {
		return fmt.Sprintf("OrderStatus(%d)", i)
	}
	return _OrderStatusName[_OrderStatusIndex[i]:_OrderStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OrderStatusNoOp() {
	var x [1]struct{}
	_ = x[OrderStatusUnknown-(0)]
	_ = x[OrderStatusCanceled-(1)]
	_ = x[OrderStatusCompleted-(2)]
	_ = x[OrderStatusExpired-(3)]
	_ = x[OrderStatusFilled-(4)]
	_ = x[OrderStatusPendingCancel-(5)]
	_ = x[OrderStatusPendingNew-(6)]
	_ = x[OrderStatusPendingReplace-(7)]
	_ = x[OrderStatusRejected-(8)]
	_ = x[OrderStatusSuspended-(9)]
	_ = x[OrderStatusWorking-(10)]
}

var _OrderStatusValues = []OrderStatus{OrderStatusUnknown, OrderStatusCanceled, OrderStatusCompleted, OrderStatusExpired, OrderStatusFilled, OrderStatusPendingCancel, OrderStatusPendingNew, OrderStatusPendingReplace, OrderStatusRejected, OrderStatusSuspended, OrderStatusWorking}

var _OrderStatusNameToValueMap = map[string]OrderStatus{
	_OrderStatusName[0:7]:        OrderStatusUnknown,
	_OrderStatusLowerName[0:7]:   OrderStatusUnknown,
	_OrderStatusName[7:15]:       OrderStatusCanceled,
	_OrderStatusLowerName[7:15]:  OrderStatusCanceled,
	_OrderStatusName[15:24]:      OrderStatusCompleted,
	_OrderStatusLowerName[15:24]: OrderStatusCompleted,
	_OrderStatusName[24:31]:      OrderStatusExpired,
	_OrderStatusLowerName[24:31]: OrderStatusExpired,
	_OrderStatusName[31:37]:      OrderStatusFilled,
	_OrderStatusLowerName[31:37]: OrderStatusFilled,
	_OrderStatusName[37:50]:      OrderStatusPendingCancel,
	_OrderStatusLowerName[37:50]: OrderStatusPendingCancel,
	_OrderStatusName[50:60]:      OrderStatusPendingNew,
	_OrderStatusLowerName[50:60]: OrderStatusPendingNew,
	_OrderStatusName[60:74]:      OrderStatusPendingReplace,
	_OrderStatusLowerName[60:74]: OrderStatusPendingReplace,
	_OrderStatusName[74:82]:      OrderStatusRejected,
	_OrderStatusLowerName[74:82]: OrderStatusRejected,
	_OrderStatusName[82:91]:      OrderStatusSuspended,
	_OrderStatusLowerName[82:91]: OrderStatusSuspended,
	_OrderStatusName[91:98]:      OrderStatusWorking,
	_OrderStatusLowerName[91:98]: OrderStatusWorking,
}

var _OrderStatusNames = []string{
	_OrderStatusName[0:7],
	_OrderStatusName[7:15],
	_OrderStatusName[15:24],
	_OrderStatusName[24:31],
	_OrderStatusName[31:37],
	_OrderStatusName[37:50],
	_OrderStatusName[50:60],
	_OrderStatusName[60:74],
	_OrderStatusName[74:82],
	_OrderStatusName[82:91],
	_OrderStatusName[91:98],
}

// OrderStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderStatusString(s string) (OrderStatus, error) {
	if val, ok := _OrderStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OrderStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderStatus values", s)
}

// OrderStatusValues returns all values of the enum
func OrderStatusValues() []OrderStatus {
	return _OrderStatusValues
}

// OrderStatusStrings returns a slice of all String values of the enum
func OrderStatusStrings() []string {
	strs := make([]string, len(_OrderStatusNames))
	copy(strs, _OrderStatusNames)
	return strs
}

// IsAOrderStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderStatus) IsAOrderStatus() bool {
	for _, v := range _OrderStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OrderStatus
func (i OrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrderStatus
func (i *OrderStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderStatus should be a string, got %s", data)
	}

	var err error
	*i, err = OrderStatusString(s)
	return err
}
