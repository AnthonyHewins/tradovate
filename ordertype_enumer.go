// Code generated by "enumer -type OrderType -trimprefix OrderType -json"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OrderTypeName = "UnspecifiedLimitMITMarketQTSStopStopLimitTrailingStopTrailingStopLimit"

var _OrderTypeIndex = [...]uint8{0, 11, 16, 19, 25, 28, 32, 41, 53, 70}

const _OrderTypeLowerName = "unspecifiedlimitmitmarketqtsstopstoplimittrailingstoptrailingstoplimit"

func (i OrderType) String() string {
	if i >= OrderType(len(_OrderTypeIndex)-1) {
		return fmt.Sprintf("OrderType(%d)", i)
	}
	return _OrderTypeName[_OrderTypeIndex[i]:_OrderTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OrderTypeNoOp() {
	var x [1]struct{}
	_ = x[OrderTypeUnspecified-(0)]
	_ = x[OrderTypeLimit-(1)]
	_ = x[OrderTypeMIT-(2)]
	_ = x[OrderTypeMarket-(3)]
	_ = x[OrderTypeQTS-(4)]
	_ = x[OrderTypeStop-(5)]
	_ = x[OrderTypeStopLimit-(6)]
	_ = x[OrderTypeTrailingStop-(7)]
	_ = x[OrderTypeTrailingStopLimit-(8)]
}

var _OrderTypeValues = []OrderType{OrderTypeUnspecified, OrderTypeLimit, OrderTypeMIT, OrderTypeMarket, OrderTypeQTS, OrderTypeStop, OrderTypeStopLimit, OrderTypeTrailingStop, OrderTypeTrailingStopLimit}

var _OrderTypeNameToValueMap = map[string]OrderType{
	_OrderTypeName[0:11]:       OrderTypeUnspecified,
	_OrderTypeLowerName[0:11]:  OrderTypeUnspecified,
	_OrderTypeName[11:16]:      OrderTypeLimit,
	_OrderTypeLowerName[11:16]: OrderTypeLimit,
	_OrderTypeName[16:19]:      OrderTypeMIT,
	_OrderTypeLowerName[16:19]: OrderTypeMIT,
	_OrderTypeName[19:25]:      OrderTypeMarket,
	_OrderTypeLowerName[19:25]: OrderTypeMarket,
	_OrderTypeName[25:28]:      OrderTypeQTS,
	_OrderTypeLowerName[25:28]: OrderTypeQTS,
	_OrderTypeName[28:32]:      OrderTypeStop,
	_OrderTypeLowerName[28:32]: OrderTypeStop,
	_OrderTypeName[32:41]:      OrderTypeStopLimit,
	_OrderTypeLowerName[32:41]: OrderTypeStopLimit,
	_OrderTypeName[41:53]:      OrderTypeTrailingStop,
	_OrderTypeLowerName[41:53]: OrderTypeTrailingStop,
	_OrderTypeName[53:70]:      OrderTypeTrailingStopLimit,
	_OrderTypeLowerName[53:70]: OrderTypeTrailingStopLimit,
}

var _OrderTypeNames = []string{
	_OrderTypeName[0:11],
	_OrderTypeName[11:16],
	_OrderTypeName[16:19],
	_OrderTypeName[19:25],
	_OrderTypeName[25:28],
	_OrderTypeName[28:32],
	_OrderTypeName[32:41],
	_OrderTypeName[41:53],
	_OrderTypeName[53:70],
}

// OrderTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderTypeString(s string) (OrderType, error) {
	if val, ok := _OrderTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OrderTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderType values", s)
}

// OrderTypeValues returns all values of the enum
func OrderTypeValues() []OrderType {
	return _OrderTypeValues
}

// OrderTypeStrings returns a slice of all String values of the enum
func OrderTypeStrings() []string {
	strs := make([]string, len(_OrderTypeNames))
	copy(strs, _OrderTypeNames)
	return strs
}

// IsAOrderType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderType) IsAOrderType() bool {
	for _, v := range _OrderTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OrderType
func (i OrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrderType
func (i *OrderType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderType should be a string, got %s", data)
	}

	var err error
	*i, err = OrderTypeString(s)
	return err
}
