// Code generated by "enumer -type ShutdownCode -trimprefix ShutdownCode -json"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ShutdownCodeName = "UnspecifiedMaintenanceConnectionQuotaReachedIPQuotaReached"

var _ShutdownCodeIndex = [...]uint8{0, 11, 22, 44, 58}

const _ShutdownCodeLowerName = "unspecifiedmaintenanceconnectionquotareachedipquotareached"

func (i ShutdownCode) String() string {
	if i >= ShutdownCode(len(_ShutdownCodeIndex)-1) {
		return fmt.Sprintf("ShutdownCode(%d)", i)
	}
	return _ShutdownCodeName[_ShutdownCodeIndex[i]:_ShutdownCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ShutdownCodeNoOp() {
	var x [1]struct{}
	_ = x[ShutdownCodeUnspecified-(0)]
	_ = x[ShutdownCodeMaintenance-(1)]
	_ = x[ShutdownCodeConnectionQuotaReached-(2)]
	_ = x[ShutdownCodeIPQuotaReached-(3)]
}

var _ShutdownCodeValues = []ShutdownCode{ShutdownCodeUnspecified, ShutdownCodeMaintenance, ShutdownCodeConnectionQuotaReached, ShutdownCodeIPQuotaReached}

var _ShutdownCodeNameToValueMap = map[string]ShutdownCode{
	_ShutdownCodeName[0:11]:       ShutdownCodeUnspecified,
	_ShutdownCodeLowerName[0:11]:  ShutdownCodeUnspecified,
	_ShutdownCodeName[11:22]:      ShutdownCodeMaintenance,
	_ShutdownCodeLowerName[11:22]: ShutdownCodeMaintenance,
	_ShutdownCodeName[22:44]:      ShutdownCodeConnectionQuotaReached,
	_ShutdownCodeLowerName[22:44]: ShutdownCodeConnectionQuotaReached,
	_ShutdownCodeName[44:58]:      ShutdownCodeIPQuotaReached,
	_ShutdownCodeLowerName[44:58]: ShutdownCodeIPQuotaReached,
}

var _ShutdownCodeNames = []string{
	_ShutdownCodeName[0:11],
	_ShutdownCodeName[11:22],
	_ShutdownCodeName[22:44],
	_ShutdownCodeName[44:58],
}

// ShutdownCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShutdownCodeString(s string) (ShutdownCode, error) {
	if val, ok := _ShutdownCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ShutdownCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShutdownCode values", s)
}

// ShutdownCodeValues returns all values of the enum
func ShutdownCodeValues() []ShutdownCode {
	return _ShutdownCodeValues
}

// ShutdownCodeStrings returns a slice of all String values of the enum
func ShutdownCodeStrings() []string {
	strs := make([]string, len(_ShutdownCodeNames))
	copy(strs, _ShutdownCodeNames)
	return strs
}

// IsAShutdownCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShutdownCode) IsAShutdownCode() bool {
	for _, v := range _ShutdownCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ShutdownCode
func (i ShutdownCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ShutdownCode
func (i *ShutdownCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShutdownCode should be a string, got %s", data)
	}

	var err error
	*i, err = ShutdownCodeString(s)
	return err
}
