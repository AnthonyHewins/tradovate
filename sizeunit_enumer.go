// Code generated by "enumer -type SizeUnit -json -trimprefix SizeUnit"; DO NOT EDIT.

package tradovate

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SizeUnitName = "UnspecifiedVolumeRangeUnderlyingUnitsMomentumRangePointAndFigureOFARange"

var _SizeUnitIndex = [...]uint8{0, 11, 17, 22, 37, 50, 64, 72}

const _SizeUnitLowerName = "unspecifiedvolumerangeunderlyingunitsmomentumrangepointandfigureofarange"

func (i SizeUnit) String() string {
	if i >= SizeUnit(len(_SizeUnitIndex)-1) {
		return fmt.Sprintf("SizeUnit(%d)", i)
	}
	return _SizeUnitName[_SizeUnitIndex[i]:_SizeUnitIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SizeUnitNoOp() {
	var x [1]struct{}
	_ = x[SizeUnitUnspecified-(0)]
	_ = x[SizeUnitVolume-(1)]
	_ = x[SizeUnitRange-(2)]
	_ = x[SizeUnitUnderlyingUnits-(3)]
	_ = x[SizeUnitMomentumRange-(4)]
	_ = x[SizeUnitPointAndFigure-(5)]
	_ = x[SizeUnitOFARange-(6)]
}

var _SizeUnitValues = []SizeUnit{SizeUnitUnspecified, SizeUnitVolume, SizeUnitRange, SizeUnitUnderlyingUnits, SizeUnitMomentumRange, SizeUnitPointAndFigure, SizeUnitOFARange}

var _SizeUnitNameToValueMap = map[string]SizeUnit{
	_SizeUnitName[0:11]:       SizeUnitUnspecified,
	_SizeUnitLowerName[0:11]:  SizeUnitUnspecified,
	_SizeUnitName[11:17]:      SizeUnitVolume,
	_SizeUnitLowerName[11:17]: SizeUnitVolume,
	_SizeUnitName[17:22]:      SizeUnitRange,
	_SizeUnitLowerName[17:22]: SizeUnitRange,
	_SizeUnitName[22:37]:      SizeUnitUnderlyingUnits,
	_SizeUnitLowerName[22:37]: SizeUnitUnderlyingUnits,
	_SizeUnitName[37:50]:      SizeUnitMomentumRange,
	_SizeUnitLowerName[37:50]: SizeUnitMomentumRange,
	_SizeUnitName[50:64]:      SizeUnitPointAndFigure,
	_SizeUnitLowerName[50:64]: SizeUnitPointAndFigure,
	_SizeUnitName[64:72]:      SizeUnitOFARange,
	_SizeUnitLowerName[64:72]: SizeUnitOFARange,
}

var _SizeUnitNames = []string{
	_SizeUnitName[0:11],
	_SizeUnitName[11:17],
	_SizeUnitName[17:22],
	_SizeUnitName[22:37],
	_SizeUnitName[37:50],
	_SizeUnitName[50:64],
	_SizeUnitName[64:72],
}

// SizeUnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SizeUnitString(s string) (SizeUnit, error) {
	if val, ok := _SizeUnitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SizeUnitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SizeUnit values", s)
}

// SizeUnitValues returns all values of the enum
func SizeUnitValues() []SizeUnit {
	return _SizeUnitValues
}

// SizeUnitStrings returns a slice of all String values of the enum
func SizeUnitStrings() []string {
	strs := make([]string, len(_SizeUnitNames))
	copy(strs, _SizeUnitNames)
	return strs
}

// IsASizeUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SizeUnit) IsASizeUnit() bool {
	for _, v := range _SizeUnitValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SizeUnit
func (i SizeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SizeUnit
func (i *SizeUnit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SizeUnit should be a string, got %s", data)
	}

	var err error
	*i, err = SizeUnitString(s)
	return err
}
